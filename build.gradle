import groovy.swing.SwingBuilder

plugins {
  id 'me.champeau.jmh' version '0.7.1'
  id 'net.researchgate.release' version '3.0.2'
  id 'com.github.node-gradle.node' version '7.0.0'
	id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

repositories {
	mavenLocal()
	mavenCentral()
}

apply plugin: 'me.champeau.jmh'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group = 'com.squarespace.cldr-engine'

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
  gsonVersion = '2.10.1'
  lombokVersion = '1.18.28'
  testngVersion = '7.1.0'

  buildDate = new java.util.Date()
  buildCommit = ('git rev-parse HEAD').execute().text.trim()

  isRelease = !version.endsWith('SNAPSHOT')
  isUpload = false
  isSign = false
}

dependencies {
  implementation "com.google.code.gson:gson:${gsonVersion}"

  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testImplementation "org.testng:testng:${testngVersion}"
  testImplementation 'commons-io:commons-io:2.1'
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

jmh {
  jmhVersion = '1.23'
  forceGC = true
  includeTests = false
  zip64 = true
  //include = '.*LanguageMatcher.*'
}

plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}

sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']
sourceSets.main.resources.srcDirs = ['src/main/resources', 'src/generated/resources']

eclipse {
	project {
		name = 'cldr-engine-java'
	}
}

wrapper {
	gradleVersion = '8.4'
}

clean {
	delete 'src/generated'
}

test {
  useTestNG()
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.destination file("${buildDir}/jacoco-report")
    }
}

// Disable Javadoc linting under Java 8+
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

release {
  git {
    requireBranch.set('1.8.x')
  }
}

node {
  version = '20.6.1'
}

task yarnInstall(type: YarnTask) {
  args = []
  execOverrides {
    it.workingDir = 'codegen'
  }
}

task buildCodegen(type: YarnTask) {
  args = ['build']
  execOverrides {
    it.workingDir = 'codegen'
  }
}

task runCodegen(type: YarnTask) {
  args = ['generate']
  execOverrides {
    it.workingDir = 'codegen'
  }
}

compileJava.dependsOn 'runCodegen'
runCodegen.dependsOn 'buildCodegen'

java {
  withSourcesJar()
  withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cldr-engine'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'cldr-engine'
                description = 'Squarespace cldr-engine'
                url = 'https://github.com/squarespace/cldr-engine-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'pathensley'
                        name = 'Patrick Hensley'
                        email = 'pathensley@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:Squarespace/cldr-engine-java.git'
                    developerConnection = 'scm:git:git@github.com:Squarespace/cldr-engine-java.git'
                    url = 'https://github.com/squarespace/cldr-engine-java'
                }
            }
        }
    }
    repositories {
        maven {
          def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
          def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
          def _username = project.ext.properties.OSS_USERNAME
          def _password = project.ext.properties.OSS_PASSWORD

          if (project.hasProperty('publish-internal')) {
            releasesRepoUrl = NEXUS_INTERNAL_RELEASE_URL
            snapshotsRepoUrl = NEXUS_INTERNAL_SNAPSHOT_URL
            _username = NEXUS_USERNAME
            _password = System.getenv('NEXUS_PASSWORD')
          }

          url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
          credentials {
            username = _username
            password = _password
          }
        }
    }
}

tasks.withType(Sign) {
  onlyIf { isRelease }
}

signing {
    sign publishing.publications.mavenJava
    useGpgCmd()
}

